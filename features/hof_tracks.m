function [hists] = hof_tracks(angles,weights,inds,numBins,m,n,doWeight)
% calculate weighted histogram of optic flow for each cube and linearize the
% result for each time window
% INPUT:
%     flowBatch: generated by function getFlowBatch
%     flowWeight: generated by function getFlowBatch
%     numBins: number of bins of interest. currently using 8.
% OUTPUT:
%     flowBin: a matrix that contains the linearized and normalized
%     histogram distribution of velocity angles

nt = max(inds(:,1));
ns = m*n;
binRanges = -pi/2:(pi/numBins):pi/2;
hists = zeros(nt,numBins*m*n);


for i = 1:nt % go over all time windows
   twInd = find(inds(:,1)==i); % calcualte histogram for each time window
   if ~isempty(twInd)
       hists(i,:) = zeros(1,numBins*ns);
       for j = 1:ns % calculate histogram for spatial each patch in the time window
           patchInd = find(inds(twInd,2)==j);
           if ~isempty(patchInd)
               tmpangle = angles(patchInd,:);
               tmpangle = tmpangle(:);
               tmpweight = weights(patchInd,:);
               tmpweight = tmpweight(:);
               [binCounts,binInd] = histc(tmpangle,binRanges);
               
               if doWeight==0
                   % no weighting
                   hists(i,(j-1)*numBins+1:j*numBins) = binCounts(1:numBins)./sum(binCounts(1:numBins));
               else
                   % weighted histograms
                   tmpcounts = zeros(1,numBins);
                   for k = 1:numBins
                       tmpcounts(1,k) = sum(tmpweight(binInd==k));
                   end
                   hists(i,(j-1)*numBins+1:j*numBins) = tmpcounts;
               end
           end
       end
       if sum(hists(i,:))~=0
           hists(i,:) = hists(i,:)./sum(hists(i,:));
       end
   end
end


end